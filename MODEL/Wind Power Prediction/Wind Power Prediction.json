{"main":"mbq35meps5vencfx","models":{"mbq35meps5vencfx":{"variables":{},"variableRef":[],"innerModels":{},"inData":[],"outData":[],"type":"data","param":{},"functions":[{"persist-mode":"auto","func":"brightics.function.io$load13889","name":"brightics.function.io$load","param":{"partial_path":["/brightics@samsung.com/upload/wind_2204.csv"]},"meta":{"table":{"type":"table"}},"context":"python","version":"3.6","outputs":{"table":"tu3avpc22qmev9h7"},"fid":"fvxat946wegg9bmc","label":"Load :: 풍력 발전량","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tctnznj5nv2zezg9"],"models":[],"images":[]},"outputs":{"df":"t6y2tns28r4t6w5w"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport pandas as pd\nfrom datetime import datetime\n\ndf = inputs[0]\ndf['datetime'] = pd.to_datetime(df['datetime'])\n\ndf = df.loc[\n  ~((df['datetime'] >= datetime(2021,4,1)) & (df['datetime'] <= datetime(2021,4,6)))\n  & ~((df['datetime'] >= datetime(2021,7,12)) & (df['datetime'] <= datetime(2021,7,14)))\n  & ~((df['datetime'] >= datetime(2021,11,5)) & (df['datetime'] <= datetime(2021,11,9)))\n  & ~((df['datetime'] >= datetime(2021,11,18)) & (df['datetime'] <= datetime(2021,12,2)))\n]\ndf['datetime'] = df['datetime'].astype('str')"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df":{"type":"table"}},"fid":"fu64hr8q5574r3em","label":"Python Script : 데이터 오류 제거","persist":true,"skip":false},{"persist-mode":"auto","func":"simpleFilterPython","name":"brightics.function.manipulation$simple_filter","context":"python","version":"3.6","param":{"main_operator":"and","input_cols":["target"],"operators":["<="],"operands":["60000"]},"inputs":{"table":"t3fbfrv54hdafmxu"},"outputs":{"out_table":"tctnznj5nv2zezg9"},"meta":{"table":{"type":"table"},"out_table":{"type":"table"}},"fid":"fgpjx4qxhpshw6ek","label":"Filter: 이상치 제거","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["t6y2tns28r4t6w5w"],"models":[],"images":[]},"outputs":{"df_1h":"tdgsby7wge6g67h8"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport pandas as pd\n\ndf = inputs[0]\n\ndf.set_index(pd.to_datetime(df['datetime']), inplace=True)\ndf_1h = df.resample(rule='1H').mean()\ndf_1h = df_1h.reset_index()\ndf_1h['datetime'] = df_1h['datetime'].astype(str)"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df_1h":{"type":"table"}},"fid":"fgw9zk9csxwabhq2","label":"Python Script: 시간당 평균값","persist":true,"skip":false},{"persist-mode":"auto","func":"queryExecutorPython","name":"brightics.function.transform$sql_execute","context":"python","version":"3.6","param":{"query":"SELECT * from  #{DF(0)} where datetime < '2022-03-01'"},"inputs":{"tables":["twgjmrpa3q8x8zd9"]},"outputs":{"out_table":"tfk6ykjpt5zujp7t"},"meta":{"tables":{"type":"table","range":{"min":1,"max":10}},"out_table":{"type":"table"}},"fid":"fkw6dx87rzpfkn6j","label":"Query Executor: Train 구간","persist":true,"skip":false},{"persist-mode":"auto","func":"queryExecutorPython","name":"brightics.function.transform$sql_execute","context":"python","version":"3.6","param":{"query":"SELECT * from  #{DF(0)} where datetime > '2022-03-01'"},"inputs":{"tables":["t8ufkdtepxvt4492"]},"outputs":{"out_table":"tjzzjz25v8td2p3e"},"meta":{"tables":{"type":"table","range":{"min":1,"max":10}},"out_table":{"type":"table"}},"fid":"fd663twe4cuesbre","label":"Query Executor: Validation 구간","persist":true,"skip":false},{"persist-mode":"auto","context":"python","func":"merge","name":"brightics.function.transform$join","version":"3.6","inputs":{"left_table":"tfk6ykjpt5zujp7t","right_table":"tpfdhj2u7ahtxdej"},"outputs":{"table":"tr5us99tfst7safe"},"meta":{"left_table":{"type":"table"},"right_table":{"type":"table"},"table":{"type":"table"}},"param":{"left_on":["datetime"],"right_on":["datetime"],"how":"inner","sort":"false"},"fid":"fnkqebndhtzcf2ew","label":"Join","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tr5us99tfst7safe"],"models":[],"images":[]},"outputs":{"df":"t2t58m6vpxeev9pt"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport pandas as pd\nimport numpy as np\n\ndf = inputs[0]\ndf['_datetime'] = pd.to_datetime(df['datetime'])\ndf['month'] = df['_datetime'].apply(lambda x: x.month)\ndf['day'] = df['_datetime'].apply(lambda x: x.day)\ndf['hour'] = df['_datetime'].apply(lambda x: x.hour)\ndf = df.drop(columns=['_datetime'])\n#df['pressure'] = df['pressure'].fillna(df['pressure'].mean())\n#df['density'] = df['pressure'] / (np.where(abs(df['temperature']) < 1, 1, df['temperature']))\n#df['density'] = 100000 /(287.058*(df['temperature']+273.15))\n\ndf['power'] = df['target'].shift(-1)\ndf['power'] = df['power'].fillna(df['power'].mean())"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df":{"type":"table"}},"fid":"fzs2tvz9z52qwqg8","label":"Python Script: 월,일,시간 추가","persist":true,"skip":false},{"persist-mode":"auto","context":"python","func":"merge","name":"brightics.function.transform$join","version":"3.6","inputs":{"left_table":"tjzzjz25v8td2p3e","right_table":"tpfdhj2u7ahtxdej"},"outputs":{"table":"t7da6brnr4bv759v"},"meta":{"left_table":{"type":"table"},"right_table":{"type":"table"},"table":{"type":"table"}},"param":{"left_on":["datetime"],"right_on":["datetime"],"how":"inner","sort":"false"},"fid":"f3h3bd7st99wa4jf","label":"Join","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["t7da6brnr4bv759v"],"models":[],"images":[]},"outputs":{"df":"tyyk8uw29jt8g5p2"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport pandas as pd\n\ndf = inputs[0]\ndf['_datetime'] = pd.to_datetime(df['datetime'])\ndf['month'] = df['_datetime'].apply(lambda x: x.month)\ndf['day'] = df['_datetime'].apply(lambda x: x.day)\ndf['hour'] = df['_datetime'].apply(lambda x: x.hour)\n#df['pressure'] = df['pressure'].fillna(df['pressure'].mean())\ndf = df.drop(columns=['_datetime'])\n#df['density'] = 100000 /(287.058*(df['temperature']+273.15))\n\ndf['power'] = df['target'].shift(-1)\ndf['power'] = df['power'].fillna(df['power'].mean())"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df":{"type":"table"}},"fid":"fd3tdr6uvwyxps45","label":"Python Script: 월,일,시간 추가","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.regression$xgb_regression_train","name":"brightics.function.regression$xgb_regression_train","param":{"importance_type":"gain","feature_cols":["temperature","humidity","windspeed","winddirection","month","day","hour"],"label_col":"target"},"meta":{"table":{"type":"table"},"model":{"type":"model"}},"context":"python","version":"3.6","inputs":{"table":"t2t58m6vpxeev9pt"},"outputs":{"model":"tkm3zhbpnec2e4zw"},"fid":"fg7ebpt2qvtasjxk","label":"XGB Regression Train","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.regression$xgb_regression_predict","name":"brightics.function.regression$xgb_regression_predict","param":{},"meta":{"table":{"type":"table"},"model":{"type":"model"},"out_table":{"type":"table"}},"context":"python","version":"3.6","inputs":{"table":"tyyk8uw29jt8g5p2","model":"tkm3zhbpnec2e4zw"},"outputs":{"out_table":"tjfcmeehy5qd9c85"},"fid":"ft5cq8gvv2fzh2df","label":"XGB Regression Predict","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tjfcmeehy5qd9c85"],"models":[],"images":[]},"outputs":{"err":"tq2cscs55rvva8mf"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport numpy as np\n\n# Define NMAE loss function\ndef NMAE(observed, pred, nominal):\n    absolute_error = np.abs(observed - pred)\n    absolute_error /= nominal\n    target_idx = np.where(observed >= nominal*0.1)\n\n    return 100 * absolute_error[target_idx].mean()\n  \n  \ndf = inputs[0]\n\nerr = NMAE(df['target'].values, df['prediction'].values, 16000)\n"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"err":{"type":"model"}},"fid":"f6ndd642ff5yz466","label":"Python Script: NMAE","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.transform$delete_missing_data","name":"brightics.function.transform$delete_missing_data","param":{"row_or_column":"index","input_cols":["target"]},"meta":{"out_table":{"type":"table","desc":"Output table for Delete Missing Value. "},"table":{"type":"table","desc":"Data in a Table. ","optional":false}},"context":"python","version":"3.6","inputs":{"table":"tdgsby7wge6g67h8"},"outputs":{"out_table":"tpfdhj2u7ahtxdej"},"fid":"fz89s7wd72a4zhzy","label":"Delete Missing Data","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tkh9qtakbn9edzb8"],"models":[],"images":[]},"outputs":{"df":"t6yxnn622s68fynp"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport pandas as pd\nimport numpy as np\n\ndf = inputs[0]\ndf['_datetime'] = pd.to_datetime(df['datetime'])\ndf['month'] = df['_datetime'].apply(lambda x: x.month)\ndf['day'] = df['_datetime'].apply(lambda x: x.day)\ndf['hour'] = df['_datetime'].apply(lambda x: x.hour)\ndf = df.drop(columns=['_datetime'])\n#df['pressure'] = df['pressure'].fillna(df['pressure'].mean())\n#df['density'] = df['pressure'] / (np.where(abs(df['temperature']) < 1, 1, df['temperature']))\n#df['density'] = 100000 /(287.058*(df['temperature']+273.15))"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df":{"type":"table"}},"fid":"fkh5vx7u58dtw4n2","label":"Python Script: 월,일,시간 추가","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.regression$xgb_regression_predict","name":"brightics.function.regression$xgb_regression_predict","param":{},"meta":{"table":{"type":"table"},"model":{"type":"model"},"out_table":{"type":"table"}},"context":"python","version":"3.6","inputs":{"table":"tge9f9e48fsut4y5","model":"tm9c5cvq4u3tgewn"},"outputs":{"out_table":"t5tscjfyyfpfag95"},"fid":"fkj6ujrt277eukca","label":"XGB Regression Predict","persist":true,"skip":false},{"persist-mode":"auto","func":"selectColumnPython","name":"brightics.function.transform$select_column","context":"python","version":"3.6","param":{"input_cols":["datetime","prediction"],"output_cols":["datetime","prediction"],"output_types":["string","string"]},"inputs":{"table":"t347cttpv3hf65av"},"outputs":{"out_table":"t7hwfh55r2ru5vt8"},"meta":{"table":{"type":"table"},"out_table":{"type":"table"}},"fid":"fvghvne26t9fmuh6","label":"Select Column: 제출용","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.io$load13889","name":"brightics.function.io$load","param":{"partial_path":["/brightics@samsung.com/upload/wind_forecast_weather.csv"]},"meta":{"table":{"type":"table"}},"context":"python","version":"3.6","outputs":{"table":"tkrd5yyjgv76b9bc"},"fid":"fzh5sh87jgsemjt7","label":"Load: 예보 데이터","persist":true,"skip":false},{"persist-mode":"auto","func":"simpleFilterPython","name":"brightics.function.manipulation$simple_filter","context":"python","version":"3.6","param":{"main_operator":"and","input_cols":["forecast_time","forecast","forecast"],"operators":["ends with",">=","<="],"operands":["14:00:00","10","33"]},"inputs":{"table":"tkrd5yyjgv76b9bc"},"outputs":{"out_table":"tyqmvhv6w72st3h9"},"meta":{"table":{"type":"table"},"out_table":{"type":"table"}},"fid":"fww7uqba9dnns85j","label":"Filter: 14시 예보 자료만 사용","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tyqmvhv6w72st3h9"],"models":[],"images":[]},"outputs":{"df":"tpmeteppcjtdwswj"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\ndf = inputs[0]\n\nimport pandas as pd\ndf['forecast_time_'] = pd.to_datetime(df['forecast_time'])\ndf['datetime'] = df['forecast_time_'] + df['forecast'].map(lambda x: pd.DateOffset(hours=x))\ndf['datetime'] = df['datetime'].astype(str)\ndf.drop(columns=['forecast_time_'], inplace=True)\n"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df":{"type":"table"}},"fid":"fxhzwbgmrzbhqbff","label":"Python Script : 예보시간 추가","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tpmeteppcjtdwswj"],"models":[],"images":[]},"outputs":{"every_hour":"t8ufkdtepxvt4492"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport pandas as pd\ndf = inputs[0]\n#df['datetime'] = pd.to_datetime(df['datetime'])\ndatetime_from = df['datetime'][0]\ndatetime_to = df['datetime'].values[-1]\n\nevery_hour = pd.DataFrame(pd.date_range(start=datetime_from, end=datetime_to, freq='H'), columns=['datetime'])\nevery_hour['datetime'] = every_hour['datetime'].astype('str')\n\n\nevery_hour = pd.merge(every_hour, df, on='datetime', how='outer')\nevery_hour['forecast_time'] = every_hour['forecast_time'].ffill()\nevery_hour[\"temperature\"] = every_hour[\"temperature\"].interpolate()\nevery_hour[\"humidity\"] = every_hour[\"humidity\"].interpolate()\nevery_hour[\"windspeed\"] = every_hour[\"windspeed\"].interpolate()\nevery_hour[\"winddirection\"] = every_hour[\"winddirection\"].interpolate()"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"every_hour":{"type":"table"}},"fid":"fh3snrhyt94fkpk4","label":"Python Script: 3시간 -> 1시간 단위로 보간","persist":true,"skip":false},{"persist-mode":"auto","func":"queryExecutorPython","name":"brightics.function.transform$sql_execute","context":"python","version":"3.6","param":{"query":"SELECT * from  #{DF(0)} where datetime >= '2022-05-01' and datetime < '2022-07-01'"},"inputs":{"tables":["t8ufkdtepxvt4492"]},"outputs":{"out_table":"tkh9qtakbn9edzb8"},"meta":{"tables":{"type":"table","range":{"min":1,"max":10}},"out_table":{"type":"table"}},"fid":"f5rqssa7e93uk3kc","label":"Query Executor: prediction 구간","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tu3avpc22qmev9h7"],"models":[],"images":[]},"outputs":{"df":"t3fbfrv54hdafmxu"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\ndf = inputs[0]\n\ndf['target'] = df['target'].apply(lambda x: 0.0 if x < 0.0 else x)"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df":{"type":"table"}},"fid":"f2ttxnutf7eb46ue","label":"Python Script: 음수는 0으로 치환","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.io$load13889","name":"brightics.function.io$load","param":{"partial_path":["/brightics@samsung.com/upload/wind_weather_actual_total.csv"]},"meta":{"table":{"type":"table"}},"context":"python","version":"3.6","outputs":{"table":"tr496j63pwr8hn3j"},"fid":"f36sbh4akxt4pvz8","label":"Load","persist":true,"skip":false},{"persist-mode":"auto","func":"selectColumnPython","name":"brightics.function.transform$select_column","context":"python","version":"3.6","param":{"input_cols":["datetime","temperature","windspeed","winddirection","humidity"],"output_cols":["datetime","temperature","windspeed","winddirection","humidity"],"output_types":["string","double","double","double","double"]},"inputs":{"table":"tr496j63pwr8hn3j"},"outputs":{"out_table":"ty2vpvykztk97dd5"},"meta":{"table":{"type":"table"},"out_table":{"type":"table"}},"fid":"fcndpubg7c2zxqjn","label":"Select Column","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["ty2vpvykztk97dd5"],"models":[],"images":[]},"outputs":{"df":"tkq976rbezwqnytg"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport pandas as pd\ndf = inputs[0]\n\ndf['datetime'] = df['datetime'].apply(lambda x: x + ':00')\ndf['datetime'] = pd.to_datetime(df['datetime'])\ndf['datetime'] = df['datetime'].astype('str')"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df":{"type":"table"}},"fid":"fac9rgbptptxjjn8","label":"Python Script: 시간 서식 맞추기","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.transform$delete_missing_data","name":"brightics.function.transform$delete_missing_data","param":{"row_or_column":"index","input_cols":["datetime","temperature","windspeed","winddirection","humidity"]},"meta":{"out_table":{"type":"table","desc":"Output table for Delete Missing Value. "},"table":{"type":"table","desc":"Data in a Table. ","optional":false}},"context":"python","version":"3.6","inputs":{"table":"tkq976rbezwqnytg"},"outputs":{"out_table":"twgjmrpa3q8x8zd9"},"fid":"fzqqss7umnrvwsec","label":"Delete Missing Data","persist":true,"skip":false},{"persist-mode":"auto","func":"queryExecutorPython","name":"brightics.function.transform$sql_execute","context":"python","version":"3.6","param":{"query":"SELECT * from  #{DF(0)} where datetime < '2022-05-01'"},"inputs":{"tables":["twgjmrpa3q8x8zd9"]},"outputs":{"out_table":"t22pzwmwdyfq2uvz"},"meta":{"tables":{"type":"table","range":{"min":1,"max":10}},"out_table":{"type":"table"}},"fid":"fqn42m5v5htq9a76","label":"Query Executor: train 구간","persist":true,"skip":false},{"persist-mode":"auto","context":"python","func":"merge","name":"brightics.function.transform$join","version":"3.6","inputs":{"left_table":"tpfdhj2u7ahtxdej","right_table":"t22pzwmwdyfq2uvz"},"outputs":{"table":"tkttdf6q6hkcuk9z"},"meta":{"left_table":{"type":"table"},"right_table":{"type":"table"},"table":{"type":"table"}},"param":{"left_on":["datetime"],"right_on":["datetime"],"how":"inner","sort":"false"},"fid":"fqq7bq5wnm4t7vqx","label":"Join","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tkttdf6q6hkcuk9z"],"models":[],"images":[]},"outputs":{"df":"tv9y9t4smcbtbxjz"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport pandas as pd\nimport numpy as np\n\ndf = inputs[0]\ndf['_datetime'] = pd.to_datetime(df['datetime'])\ndf['month'] = df['_datetime'].apply(lambda x: x.month)\ndf['day'] = df['_datetime'].apply(lambda x: x.day)\ndf['hour'] = df['_datetime'].apply(lambda x: x.hour)\ndf = df.drop(columns=['_datetime'])\n#df['pressure'] = df['pressure'].fillna(df['pressure'].mean())\n#df['density'] = df['pressure'] / (np.where(abs(df['temperature']) < 1, 1, df['temperature']))\n#df['density'] = 100000 /(287.058*(df['temperature']+273.15))\n\ndf['power'] = df['target'].shift(-1)\ndf['power'] = df['power'].fillna(df['power'].mean())"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df":{"type":"table"}},"fid":"fu3323ntz6gy8z53","label":"Python Script: 월,일,시간 추가","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.regression$xgb_regression_train","name":"brightics.function.regression$xgb_regression_train","param":{"importance_type":"gain","feature_cols":["winddirection_cos","winddirection_sin","hour_cos","hour_sin","day_cos","day_sin","month_cos","month_sin","temperature","windspeed","humidity"],"label_col":"target"},"meta":{"table":{"type":"table"},"model":{"type":"model"}},"context":"python","version":"3.6","inputs":{"table":"t9ntquggraqxej29"},"outputs":{"model":"tm9c5cvq4u3tgewn"},"fid":"favefwbag2z6493e","label":"XGB Regression Train","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.extraction$scale","name":"brightics.function.extraction$scale","param":{"scaler":"RobustScaler","input_cols":["temperature","windspeed","winddirection","humidity"],"suffix":"_robust"},"meta":{"table":{"type":"table","desc":"Data in a table","optional":false},"out_table":{"type":"table","desc":""},"model":{"type":"model","desc":"Normalized data"}},"context":"python","version":"3.6","inputs":{"table":"t2t58m6vpxeev9pt"},"outputs":{"out_table":"tg345rhfwkeqangs","model":"tuqe56wjvq462ta9"},"fid":"ftds5yujxxwvtp5q","label":"Normalization","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.extraction$scale","name":"brightics.function.extraction$scale","param":{"scaler":"RobustScaler","input_cols":["temperature","windspeed","winddirection","humidity"],"suffix":"_robust"},"meta":{"table":{"type":"table","desc":"Data in a table","optional":false},"out_table":{"type":"table","desc":""},"model":{"type":"model","desc":"Normalized data"}},"context":"python","version":"3.6","inputs":{"table":"tyyk8uw29jt8g5p2"},"outputs":{"out_table":"twvmx5yaga5g9x3q","model":"tyygbzs4ebqj74a4"},"fid":"f8bwnwghhka787qm","label":"Normalization","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.regression$xgb_regression_train","name":"brightics.function.regression$xgb_regression_train","param":{"importance_type":"gain","feature_cols":["humidity_robust","winddirection_robust","windspeed_robust","temperature_robust","hour","day","month"],"label_col":"target"},"meta":{"table":{"type":"table"},"model":{"type":"model"}},"context":"python","version":"3.6","inputs":{"table":"tg345rhfwkeqangs"},"outputs":{"model":"tmpag8v9fpg6rsct"},"fid":"fg5rz4kcgqhfv5qt","label":"XGB Regression Train","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tg345rhfwkeqangs"],"models":["tuqe56wjvq462ta9"],"images":[]},"outputs":{"X_2":"te65d9peb3tn7gcf","plt":"tucarmmapfqwz68s"},"param":{"script":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import date\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef sin_transformer(period):\n    return FunctionTransformer(lambda x: np.sin(x / period * 2 * np.pi))\n  \ndef cos_transformer(period):\n    return FunctionTransformer(lambda x: np.cos(x / period * 2 * np.pi))\n\nX_2 = inputs[0]\n\nX_2[\"month_sin\"] = sin_transformer(12).fit_transform(X_2[[\"month\"]])\nX_2[\"month_cos\"] = cos_transformer(12).fit_transform(X_2[[\"month\"]])\n\n\nX_2[\"day_sin\"] = sin_transformer(30).fit_transform(X_2[[\"day\"]])\nX_2[\"day_cos\"] = cos_transformer(30).fit_transform(X_2[[\"day\"]])\n\nX_2[\"hour_sin\"] = sin_transformer(24).fit_transform(X_2[[\"hour\"]])\nX_2[\"hour_cos\"] = cos_transformer(24).fit_transform(X_2[[\"hour\"]])\n\nX_2[\"winddirection_sin\"] = sin_transformer(360).fit_transform(X_2[[\"winddirection\"]])\nX_2[\"winddirection_cos\"] = cos_transformer(360).fit_transform(X_2[[\"winddirection\"]])\n\nfig, ax = plt.subplots(3, 1, sharex=True, figsize=(300,8))\nX_2[[\"month_sin\", \"month_cos\"]].plot(ax=ax[0])\nX_2[[\"day_sin\", \"day_cos\"]].plot(ax=ax[1])\nX_2[[\"winddirection_sin\", \"winddirection_cos\"]].plot(ax=ax[2])\nplt.suptitle(\"Cyclical encoding with sine/cosine transformation\");"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"X_2":{"type":"table"},"plt":{"type":"image"}},"fid":"fcpfzxpn8mgjg7uh","label":"Python Script","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["twvmx5yaga5g9x3q"],"models":["tyygbzs4ebqj74a4"],"images":[]},"outputs":{"X_2":"tmajbm2rzvfstnwc","plt":"tk4q67wkjsh84dpd"},"param":{"script":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import date\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef sin_transformer(period):\n    return FunctionTransformer(lambda x: np.sin(x / period * 2 * np.pi))\n  \ndef cos_transformer(period):\n    return FunctionTransformer(lambda x: np.cos(x / period * 2 * np.pi))\n\nX_2 = inputs[0]\n\nX_2[\"month_sin\"] = sin_transformer(12).fit_transform(X_2[[\"month\"]])\nX_2[\"month_cos\"] = cos_transformer(12).fit_transform(X_2[[\"month\"]])\n\nX_2[\"day_sin\"] = sin_transformer(30).fit_transform(X_2[[\"day\"]])\nX_2[\"day_cos\"] = cos_transformer(30).fit_transform(X_2[[\"day\"]])\n\nX_2[\"hour_sin\"] = sin_transformer(24).fit_transform(X_2[[\"hour\"]])\nX_2[\"hour_cos\"] = cos_transformer(24).fit_transform(X_2[[\"hour\"]])\n\nX_2[\"winddirection_sin\"] = sin_transformer(360).fit_transform(X_2[[\"winddirection\"]])\nX_2[\"winddirection_cos\"] = cos_transformer(360).fit_transform(X_2[[\"winddirection\"]])\n\nfig, ax = plt.subplots(3, 1, sharex=True, figsize=(300,8))\nX_2[[\"month_sin\", \"month_cos\"]].plot(ax=ax[0])\nX_2[[\"day_sin\", \"day_cos\"]].plot(ax=ax[1])\nX_2[[\"winddirection_sin\", \"winddirection_cos\"]].plot(ax=ax[2])\nplt.suptitle(\"Cyclical encoding with sine/cosine transformation\");"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"X_2":{"type":"table"},"plt":{"type":"image"}},"fid":"fupn5tnwcp9uydzr","label":"Python Script","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.regression$xgb_regression_predict","name":"brightics.function.regression$xgb_regression_predict","param":{},"meta":{"table":{"type":"table"},"model":{"type":"model"},"out_table":{"type":"table"}},"context":"python","version":"3.6","inputs":{"table":"twvmx5yaga5g9x3q","model":"tmpag8v9fpg6rsct"},"outputs":{"out_table":"tw4czjf7fvqsq4yq"},"fid":"fsq3meagf7vzsrry","label":"XGB Regression Predict","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.regression$xgb_regression_train","name":"brightics.function.regression$xgb_regression_train","param":{"importance_type":"gain","feature_cols":["hour_cos","hour_sin","day_cos","day_sin","month_cos","month_sin","temperature","windspeed","humidity","winddirection_sin","winddirection_cos"],"label_col":"target"},"meta":{"table":{"type":"table"},"model":{"type":"model"}},"context":"python","version":"3.6","inputs":{"table":"te65d9peb3tn7gcf"},"outputs":{"model":"tvmw4m6evm4gdn42"},"fid":"ff5smgpts4s8uzjy","label":"XGB Regression Train","persist":true,"skip":false},{"persist-mode":"auto","func":"brightics.function.regression$xgb_regression_predict","name":"brightics.function.regression$xgb_regression_predict","param":{},"meta":{"table":{"type":"table"},"model":{"type":"model"},"out_table":{"type":"table"}},"context":"python","version":"3.6","inputs":{"table":"tmajbm2rzvfstnwc","model":"tvmw4m6evm4gdn42"},"outputs":{"out_table":"twsrexum7k5t397a"},"fid":"fpa7vv4xn4t8ayws","label":"XGB Regression Predict","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tw4czjf7fvqsq4yq"],"models":[],"images":[]},"outputs":{"err":"t2a5rdqjkxveqauf"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport numpy as np\n\n# Define NMAE loss function\ndef NMAE(observed, pred, nominal):\n    absolute_error = np.abs(observed - pred)\n    absolute_error /= nominal\n    target_idx = np.where(observed >= nominal*0.1)\n\n    return 100 * absolute_error[target_idx].mean()\n  \n  \ndf = inputs[0]\n\nerr = NMAE(df['target'].values, df['prediction'].values, 16000)\n"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"err":{"type":"model"}},"fid":"fd5p4pthvyd94hcb","label":"Python Script: NMAE","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["twsrexum7k5t397a"],"models":[],"images":[]},"outputs":{"err":"twtgtawce6ahr84j"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\nimport numpy as np\n\n# Define NMAE loss function\ndef NMAE(observed, pred, nominal):\n    absolute_error = np.abs(observed - pred)\n    absolute_error /= nominal\n    target_idx = np.where(observed >= nominal*0.1)\n\n    return 100 * absolute_error[target_idx].mean()\n  \n  \ndf = inputs[0]\n\nerr = NMAE(df['target'].values, df['prediction'].values, 16000)\n"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"err":{"type":"model"}},"fid":"fgnn7b8tdajwtu62","label":"Python Script: NMAE","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["tv9y9t4smcbtbxjz"],"models":[],"images":[]},"outputs":{"X_2":"t9ntquggraqxej29","plt":"t3f2jrqqk6z6budz"},"param":{"script":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import date\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef sin_transformer(period):\n    return FunctionTransformer(lambda x: np.sin(x / period * 2 * np.pi))\n  \ndef cos_transformer(period):\n    return FunctionTransformer(lambda x: np.cos(x / period * 2 * np.pi))\n\nX_2 = inputs[0]\n\nX_2[\"month_sin\"] = sin_transformer(12).fit_transform(X_2[[\"month\"]])\nX_2[\"month_cos\"] = cos_transformer(12).fit_transform(X_2[[\"month\"]])\n\nX_2[\"day_sin\"] = sin_transformer(30).fit_transform(X_2[[\"day\"]])\nX_2[\"day_cos\"] = cos_transformer(30).fit_transform(X_2[[\"day\"]])\n\nX_2[\"hour_sin\"] = sin_transformer(24).fit_transform(X_2[[\"hour\"]])\nX_2[\"hour_cos\"] = cos_transformer(24).fit_transform(X_2[[\"hour\"]])\n\nX_2[\"winddirection_sin\"] = sin_transformer(360).fit_transform(X_2[[\"winddirection\"]])\nX_2[\"winddirection_cos\"] = cos_transformer(360).fit_transform(X_2[[\"winddirection\"]])\n\nfig, ax = plt.subplots(3, 1, sharex=True, figsize=(300,8))\nX_2[[\"month_sin\", \"month_cos\"]].plot(ax=ax[0])\nX_2[[\"day_sin\", \"day_cos\"]].plot(ax=ax[1])\nX_2[[\"winddirection_sin\", \"winddirection_cos\"]].plot(ax=ax[2])\nplt.suptitle(\"Cyclical encoding with sine/cosine transformation\");"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"X_2":{"type":"table"},"plt":{"type":"image"}},"fid":"fqsp4njnhgsvxa43","label":"Python Script","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["t6yxnn622s68fynp"],"models":[],"images":[]},"outputs":{"X_2":"tge9f9e48fsut4y5","plt":"twv3s9tsy96rnnsr"},"param":{"script":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import date\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef sin_transformer(period):\n    return FunctionTransformer(lambda x: np.sin(x / period * 2 * np.pi))\n  \ndef cos_transformer(period):\n    return FunctionTransformer(lambda x: np.cos(x / period * 2 * np.pi))\n\nX_2 = inputs[0]\n\nX_2[\"month_sin\"] = sin_transformer(12).fit_transform(X_2[[\"month\"]])\nX_2[\"month_cos\"] = cos_transformer(12).fit_transform(X_2[[\"month\"]])\n\nX_2[\"day_sin\"] = sin_transformer(30).fit_transform(X_2[[\"day\"]])\nX_2[\"day_cos\"] = cos_transformer(30).fit_transform(X_2[[\"day\"]])\n\nX_2[\"hour_sin\"] = sin_transformer(24).fit_transform(X_2[[\"hour\"]])\nX_2[\"hour_cos\"] = cos_transformer(24).fit_transform(X_2[[\"hour\"]])\n\nX_2[\"winddirection_sin\"] = sin_transformer(360).fit_transform(X_2[[\"winddirection\"]])\nX_2[\"winddirection_cos\"] = cos_transformer(360).fit_transform(X_2[[\"winddirection\"]])\n\nfig, ax = plt.subplots(3, 1, sharex=True, figsize=(300,8))\nX_2[[\"month_sin\", \"month_cos\"]].plot(ax=ax[0])\nX_2[[\"day_sin\", \"day_cos\"]].plot(ax=ax[1])\nX_2[[\"winddirection_sin\", \"winddirection_cos\"]].plot(ax=ax[2])\nplt.suptitle(\"Cyclical encoding with sine/cosine transformation\");"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"X_2":{"type":"table"},"plt":{"type":"image"}},"fid":"f34bb4evn6p2xfm4","label":"Python Script","persist":true,"skip":false},{"persist-mode":"auto","func":"pythonScript","name":"PythonScript","inputs":{"inputs":["t5tscjfyyfpfag95"],"models":[],"images":[]},"outputs":{"df":"t347cttpv3hf65av"},"param":{"script":"#\n#   NOTE : Enter \"Out Table Alias\"\n#   ex)\n#       inputDataframe = inputs[0]\n#       result = inputDataframe\n#\ndf = inputs[0]\n\ndf['prediction'] = df['prediction'].apply(lambda x: 0.0 if x < 0.0 else x)"},"version":"3.6","context":"python","meta":{"inputs":{"type":"table","range":{"min":1,"max":10}},"models":{"type":"model","range":{"min":1,"max":10}},"images":{"type":"image","range":{"min":1,"max":10}},"df":{"type":"table"}},"fid":"f9psza2t6br6e34w","label":"Python Script: 음수는 0으로 치환","persist":true,"skip":false}],"links":[{"kid":"kyegyxvvwrvvq9gd","sourceFid":"fkw6dx87rzpfkn6j","targetFid":"fnkqebndhtzcf2ew"},{"kid":"k6v8zbws99g74hqs","sourceFid":"fnkqebndhtzcf2ew","targetFid":"fzs2tvz9z52qwqg8"},{"kid":"k848dhhyyrqmjqyf","sourceFid":"fd663twe4cuesbre","targetFid":"f3h3bd7st99wa4jf"},{"kid":"k6ghpwrxkrqrp3wy","sourceFid":"f3h3bd7st99wa4jf","targetFid":"fd3tdr6uvwyxps45"},{"kid":"kvahmb9nvtfeqfcb","sourceFid":"fzs2tvz9z52qwqg8","targetFid":"fg7ebpt2qvtasjxk"},{"kid":"ksmpxpn8epdnh46u","sourceFid":"fg7ebpt2qvtasjxk","targetFid":"ft5cq8gvv2fzh2df"},{"kid":"kg2nuu54gfk7ze45","sourceFid":"fd3tdr6uvwyxps45","targetFid":"ft5cq8gvv2fzh2df"},{"kid":"kg3m65hyeux4kqgt","sourceFid":"ft5cq8gvv2fzh2df","targetFid":"f6ndd642ff5yz466"},{"kid":"ksne4wakvycf6d27","sourceFid":"fgw9zk9csxwabhq2","targetFid":"fz89s7wd72a4zhzy"},{"kid":"ker9q8u5xu4zphdz","sourceFid":"fz89s7wd72a4zhzy","targetFid":"fnkqebndhtzcf2ew"},{"kid":"kg7db4r4dhur9mwv","sourceFid":"fz89s7wd72a4zhzy","targetFid":"f3h3bd7st99wa4jf"},{"kid":"kcvz28j9ktj9q8gq","sourceFid":"f34bb4evn6p2xfm4","targetFid":"fkj6ujrt277eukca"},{"kid":"kjc29z6nfbphbadv","sourceFid":"fzh5sh87jgsemjt7","targetFid":"fww7uqba9dnns85j"},{"kid":"kvh24jm9b7ckj872","sourceFid":"fxhzwbgmrzbhqbff","targetFid":"fh3snrhyt94fkpk4"},{"kid":"kd8gtw62kpza4zjb","sourceFid":"fgpjx4qxhpshw6ek","targetFid":"fu64hr8q5574r3em"},{"kid":"kbu6he37naccfst4","sourceFid":"fu64hr8q5574r3em","targetFid":"fgw9zk9csxwabhq2"},{"kid":"kqujcwjgbqpnsxew","sourceFid":"fvxat946wegg9bmc","targetFid":"f2ttxnutf7eb46ue"},{"kid":"kny8bdwc3szuqfgm","sourceFid":"f2ttxnutf7eb46ue","targetFid":"fgpjx4qxhpshw6ek"},{"kid":"kn2nf297rxz7rag9","sourceFid":"f36sbh4akxt4pvz8","targetFid":"fcndpubg7c2zxqjn"},{"kid":"kpmy86aegs3d6vfg","sourceFid":"fcndpubg7c2zxqjn","targetFid":"fac9rgbptptxjjn8"},{"kid":"kcqn6uagz5g3hmpm","sourceFid":"fac9rgbptptxjjn8","targetFid":"fzqqss7umnrvwsec"},{"kid":"kwe5axcjppu5tyy9","sourceFid":"fzqqss7umnrvwsec","targetFid":"fkw6dx87rzpfkn6j"},{"kid":"kddbqdhrdjfatad5","sourceFid":"fzqqss7umnrvwsec","targetFid":"fqn42m5v5htq9a76"},{"kid":"kemzp2ea4cm7ctcj","sourceFid":"fz89s7wd72a4zhzy","targetFid":"fqq7bq5wnm4t7vqx"},{"kid":"kwteuce7gajrsxmh","sourceFid":"fqn42m5v5htq9a76","targetFid":"fqq7bq5wnm4t7vqx"},{"kid":"ktqmy5b37378h7wp","sourceFid":"fqq7bq5wnm4t7vqx","targetFid":"fu3323ntz6gy8z53"},{"kid":"ky4twu6qjg5uupz4","sourceFid":"favefwbag2z6493e","targetFid":"fkj6ujrt277eukca"},{"kid":"kj5mj2pv9sc8m7cz","sourceFid":"fww7uqba9dnns85j","targetFid":"fxhzwbgmrzbhqbff"},{"kid":"kxjca3dy3umppby2","sourceFid":"ftds5yujxxwvtp5q","targetFid":"fg5rz4kcgqhfv5qt"},{"kid":"k38sxrue7nsygsvs","sourceFid":"ftds5yujxxwvtp5q","targetFid":"fcpfzxpn8mgjg7uh"},{"kid":"kwfbnx3u4wq94k7h","sourceFid":"f8bwnwghhka787qm","targetFid":"fsq3meagf7vzsrry"},{"kid":"kda4r8fckedscxty","sourceFid":"f8bwnwghhka787qm","targetFid":"fupn5tnwcp9uydzr"},{"kid":"kbn56ghmt75dud6v","sourceFid":"fcpfzxpn8mgjg7uh","targetFid":"ff5smgpts4s8uzjy"},{"kid":"ksjqj5cqjcqsbkft","sourceFid":"fg5rz4kcgqhfv5qt","targetFid":"fsq3meagf7vzsrry"},{"kid":"k2jk42w57zpzj9yt","sourceFid":"ff5smgpts4s8uzjy","targetFid":"fpa7vv4xn4t8ayws"},{"kid":"kyunnmrpsctpfjx9","sourceFid":"fupn5tnwcp9uydzr","targetFid":"fpa7vv4xn4t8ayws"},{"kid":"krc43fvgee5uq9df","sourceFid":"fzs2tvz9z52qwqg8","targetFid":"ftds5yujxxwvtp5q"},{"kid":"kupbtyhc2jur6jpn","sourceFid":"fd3tdr6uvwyxps45","targetFid":"f8bwnwghhka787qm"},{"kid":"kxkjg9egwuf7z765","sourceFid":"fsq3meagf7vzsrry","targetFid":"fd5p4pthvyd94hcb"},{"kid":"kd8defyt44jky3q4","sourceFid":"fpa7vv4xn4t8ayws","targetFid":"fgnn7b8tdajwtu62"},{"kid":"kcrjc4yt573qaz8f","sourceFid":"f5rqssa7e93uk3kc","targetFid":"fkh5vx7u58dtw4n2"},{"kid":"k2qwga7zjffesbk3","sourceFid":"fqsp4njnhgsvxa43","targetFid":"favefwbag2z6493e"},{"kid":"k8aqy2727zbb65pg","sourceFid":"fkj6ujrt277eukca","targetFid":"f9psza2t6br6e34w"},{"kid":"kemqcnvp9jb4pzfc","sourceFid":"f9psza2t6br6e34w","targetFid":"fvghvne26t9fmuh6"},{"kid":"k847hh6mepush2cc","sourceFid":"fh3snrhyt94fkpk4","targetFid":"fd663twe4cuesbre"},{"kid":"k4dk6x4vfqxhhkg9","sourceFid":"fh3snrhyt94fkpk4","targetFid":"f5rqssa7e93uk3kc"},{"kid":"kbxj3ubhp99c82wb","sourceFid":"fu3323ntz6gy8z53","targetFid":"fqsp4njnhgsvxa43"},{"kid":"k8qkqg5aq2rdhdyy","sourceFid":"fkh5vx7u58dtw4n2","targetFid":"f34bb4evn6p2xfm4"}],"mid":"mbq35meps5vencfx","title":"Wind Power Prediction","persist-mode":"auto","diagram":{"PAPER_MARGIN_TOP":20,"PAPER_MARGIN_LEFT":20,"FIGURE_WIDTH":195,"FIGURE_HEIGHT":60,"GAP_WIDTH":55,"GAP_HEIGHT":40},"entries":["fvxat946wegg9bmc","fzh5sh87jgsemjt7","f36sbh4akxt4pvz8"],"optModels":{}}},"version":"3.6"}